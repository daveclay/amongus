{"version":3,"sources":["selectors/selectors.js","utils.js","redux/actions.js","redux/utils/redux-map.js","redux/mutators.js","redux/reducers.js","redux/store.js","components/Notify.js","components/Header.js","components/Player.js","components/Task.js","components/EmergencyMeetingButton.js","components/Room.js","components/Rooms.js","components/App.js","index.js"],"names":["getPlayersInRoom","players","room","playerNames","map","name","getPlayerByName","find","player","getCurrentTurnPlayer","state","currentTurnPlayerIndex","getCurrentTurnPlayerName","currentTurnPlayer","isCurrentTurnPlayer","getRoomForPlayer","rooms","isPlayerInRoom","includes","isCurrentTurnPlayerInRoom","currentTurnPlayerRoom","isCurrentTurnPlayerAbleToSelectRoom","gameOver","emergencyMeetingStarted","human","isEmergencyButtonEnabled","emergencyButton","getTaskForRoom","tasks","task","id","taskId","getTaskById","isCurrentTurnPlayerAbleToSelectTask","getRoomForTask","playerName","completed","isCurrentTurnPlayerHumanAndInRoom","getNextPlayerTurnIndex","nextIndex","length","sortByVote","a","b","ArrayUtils","clone","array","allExcept","item","filter","pluckRandom","splice","sampleIndex","Math","floor","random","sample","reduceAll","reducers","reduce","newState","reducer","mutatorToReducer","mutator","oldState","action","produce","init","type","updatePlayerName","addHumanPlayer","addComputerPlayer","nextPlayerTurn","startGame","dispatch","getState","dispatchNextTurn","enableComputerPlayers","onRoomSelected","roomName","onTaskSelected","onEmergencyMeetingSelected","skipVote","voteImposter","votedOffImposter","voteResults","votedTie","voteFailed","emergencyMeetingFinished","allTasksCompleted","callback","this","then","continueGame","lastVotingPlayerIndex","emergencyMeetingInitiatedByPlayerIndex","isEmergencyMeetingFinished","sortedTallies","Object","entries","voteTalliesByPlayer","sort","mostVotedPlayerTally","secondMostVotedPlayerTally","mostVoted","votes","secondMostVoted","buildResult","results","victory","tie","imposterPlayerName","getEmergencyMeetingVoteResults","setTimeout","console","log","computerPlayersEnabled","doComputerPlayer","getAvailableComputerActions","computerPlayerVote","computerActions","randomRoom","currentPlayer","reducerMap","actionsToReducers","initialState","actionFn","actionName","startState","getReducersForAction","movePlayersToCafeteria","forEach","movePlayerToRoom","leaveCurrentRoom","newRoom","getRoomByName","playerNameToRemove","finishCurrentTurnPlayerTask","isPlayerPerformingTask","isImposter","isOnlyPlayerInRoom","compelted","description","startEmergencyMeeting","abandonAllTasks","resetVoteTallies","notify","message","className","addPlayer","addPlayerForm","image","availablePlayerImages","addPlayerMutator","actions","resetAvailableComputerPlayers","resetAvailablePlayerImages","resetCurrentTurnPlayerIndex","pickImposter","moveCurrentPlayerToRoom","assignPlayerToTask","showCurrentPlayerNotification","startEmergencyMeetingMutator","voteImposterMutator","availableComputerPlayers","computerPlayers","playerImages","rootReducer","middlewareEnhancer","applyMiddleware","thunkMiddleware","store","createStore","composeWithDevTools","connect","placeholder","value","onKeyUp","e","code","onChange","target","onClick","ownProps","celebrate","isCurrentTurn","votingEnabled","src","currentTurnPlayerAbleToPerformTask","stopPropagation","emergencyMeetingButtonEnabled","disabled","currentTurnPlayerAbleToSelectRoom","App","rootElement","document","getElementById","ReactDOM","render","steps","currentStepIndex","intervalId","setInterval","clearInterval"],"mappings":"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","file":"static/js/main.c59e6a90.chunk.js","sourcesContent":["/************************************************\n * Selectors\n ************************************************/\nexport const getPlayersInRoom = (players, room) => room.playerNames.map(name => getPlayerByName(players, name))\nexport const getPlayerByName = (players, name) => players.find(player => player.name === name)\nexport const getCurrentTurnPlayer = (state) => state.players[state.currentTurnPlayerIndex]\nexport const getCurrentTurnPlayerName = (state) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    return currentTurnPlayer.name\n  } else {\n    return null;\n  }\n}\nexport const isCurrentTurnPlayer = (state, player) => getCurrentTurnPlayerName(state) === player.name\nexport const getRoomForPlayer = (state, player) => {\n  return state.rooms.find(room => isPlayerInRoom(room, player))\n}\nexport const isPlayerInRoom = (room, player) => room.playerNames.includes(player.name)\nexport const isCurrentTurnPlayerInRoom = (state, room) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    let currentTurnPlayerRoom = getRoomForPlayer(state, currentTurnPlayer)\n    return currentTurnPlayerRoom && currentTurnPlayerRoom.name === room.name\n  } else {\n    return false\n  }\n}\nexport const isCurrentTurnPlayerAbleToSelectRoom = (state, room) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state);\n  return currentTurnPlayer &&\n      !isCurrentTurnPlayerInRoom(state, room) &&\n      !state.gameOver &&\n      !state.emergencyMeetingStarted &&\n      currentTurnPlayer.human\n}\nexport const isEmergencyButtonEnabled = state => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state);\n  if (currentTurnPlayer) {\n    let room = getRoomForPlayer(state, currentTurnPlayer)\n    return currentTurnPlayer &&\n        currentTurnPlayer.human &&\n        !state.gameOver &&\n        room.emergencyButton\n  } else {\n    return false\n  }\n}\nexport const getTaskForRoom = (state, room) => state.tasks.find(task => task.id === room.taskId)\nexport const getTaskById = (state, id) => state.tasks.find(task => task.id === id)\nexport const isCurrentTurnPlayerAbleToSelectTask = (state, task) => {\n  let room = getRoomForTask(state, task)\n  return isCurrentTurnPlayerInRoom(state, room) &&\n      task.playerName == null &&\n      !state.emergencyMeetingStarted &&\n      !task.completed &&\n      getCurrentTurnPlayer(state).human\n}\nexport const isPlayerPerformingTask = (player, task) => task.playerName === player.name\nexport const isCurrentTurnPlayerHumanAndInRoom = (state, room) => {\n  return isCurrentTurnPlayerInRoom(state, room) && getCurrentTurnPlayer(state).human\n}\nexport const isImposter = (state, player) => state.imposterPlayerName === player.name\nexport const isOnlyPlayerInRoom = (room, player) => room.playerNames.length === 1 && room.playerNames[0] === player.name\nexport const getRoomForTask = (state, task) => state.rooms.find(room => room.taskId === task.id)\nexport const getRoomByName = (state, roomName) => state.rooms.find(room => room.name === roomName)\nexport const getNextPlayerTurnIndex = (state) => {\n  let nextIndex = state.currentTurnPlayerIndex + 1\n  if (state.players.length === nextIndex) {\n    return 0;\n  } else {\n    return nextIndex;\n  }\n}\nexport const isAllTasksComplete = state => state.tasks.filter(task => !task.completed).length === 0\n\nexport const isEmergencyMeetingFinished = state => {\n  if (!state.emergencyMeetingStarted) {\n    return\n  }\n  let lastVotingPlayerIndex = state.emergencyMeetingInitiatedByPlayerIndex - 1\n  if (lastVotingPlayerIndex < 0) {\n    lastVotingPlayerIndex = state.players.length - 1\n  }\n  return state.currentTurnPlayerIndex === lastVotingPlayerIndex\n}\n\nconst sortByVote = (a, b) => a[1] > b[1] ? -1 : 1\n\nexport const getEmergencyMeetingVoteResults = state => {\n  const sortedTallies = Object.entries(state.voteTalliesByPlayer).sort(sortByVote)\n  const mostVotedPlayerTally = sortedTallies[0]\n  const secondMostVotedPlayerTally = sortedTallies[1]\n\n  const mostVoted = {\n    playerName: mostVotedPlayerTally[0],\n    votes: mostVotedPlayerTally[1]\n  }\n\n  const secondMostVoted = {\n    playerName: secondMostVotedPlayerTally[0],\n    votes: secondMostVotedPlayerTally[1]\n  }\n\n  const buildResult = results => ({\n    mostVoted,\n    secondMostVoted,\n    results\n  })\n\n  if (mostVoted.votes === secondMostVoted.votes) {\n    return buildResult({\n      victory: false,\n      tie: true\n    })\n  } else if (mostVoted.playerName === state.imposterPlayerName) {\n    return buildResult({\n      victory: true\n    })\n  } else {\n    return buildResult({\n      victory: false\n    })\n  }\n}\n","import produce from \"immer\";\n\nexport const ArrayUtils = {\n  clone: function(array) {\n    return [...array];\n  },\n  allExcept: function(array, item) {\n    return array.filter(a => a !== item)\n  },\n  pluckRandom: function(array) {\n    if (array.length === 0) {\n      return null\n    }\n    return array.splice(ArrayUtils.sampleIndex(array), 1)[0];\n  },\n  sampleIndex: function(array) {\n    return Math.floor(Math.random() * array.length);\n  },\n  sample: (array) => {\n    return array[ArrayUtils.sampleIndex(array)];\n  }\n}\n\nexport const reduceAll = (state, ...reducers) => {\n  return reducers.reduce((newState, reducer) => reducer(newState), state)\n}\n\nexport const mutatorToReducer = (mutator) => (oldState, action) => produce(oldState, newState => mutator(newState, action))\n\nexport const newFromTemplate = (template) => {\n  let element = template.cloneNode(true);\n  element.classList.remove(\"hidden\");\n  element.attributes.removeNamedItem(\"id\");\n  return element;\n};\n\n","import {\n  getCurrentTurnPlayer,\n  getEmergencyMeetingVoteResults,\n  getRoomForPlayer,\n  getTaskForRoom,\n  isAllTasksComplete,\n  isEmergencyMeetingFinished\n} from \"../selectors/selectors\";\nimport {ArrayUtils} from \"../utils\";\n\nexport const init = () => ({\n  type: 'init'\n})\nexport const updatePlayerName = (name) => ({\n  type: 'updatePlayerName',\n  name: name\n})\n\nexport const addHumanPlayer = () => ({\n  type: 'addHumanPlayer',\n  player: {\n    human: true\n  }\n})\n\nexport const addComputerPlayer = () => ({\n  type: 'addComputerPlayer',\n  player: {\n    human: false\n  }\n})\nexport const nextPlayerTurn = () => ({\n  type: 'nextPlayerTurn'\n})\nexport const startGame = () => (dispatch, getState) => {\n  dispatch({\n    type: 'startGame'\n  })\n  dispatchNextTurn(dispatch, getState)\n}\nexport const enableComputerPlayers = () => ({\n  type: 'enableComputerPlayers'\n})\nexport const onRoomSelected = (roomName) => (dispatch, getState) => {\n  dispatch({\n    type: 'onRoomSelected',\n    roomName\n  })\n  dispatchNextTurn(dispatch, getState)\n}\nexport const onTaskSelected = (taskId) => (dispatch, getState) => {\n  dispatch({\n    type: 'onTaskSelected',\n    taskId\n  })\n  dispatchNextTurn(dispatch, getState)\n}\nexport const onEmergencyMeetingSelected = () => ({\n  type: 'onEmergencyMeetingSelected'\n})\n\nexport const skipVote = () => (dispatch, getState) => {\n  dispatchNextTurn(dispatch, getState)\n}\n\nexport const voteImposter = (playerName) => (dispatch, getState) => {\n  dispatch({\n    type: 'voteImposter',\n    playerName\n  })\n  dispatchNextTurn(dispatch, getState)\n}\n\nexport const votedOffImposter = (voteResults) => ({\n  type: 'votedOffImposter',\n  voteResults\n})\n\nexport const votedTie = (voteResults) => ({\n  type: 'votedTie',\n  voteResults\n})\n\nexport const voteFailed = (voteResults) => ({\n  type: 'voteFailed',\n  voteResults\n})\n\nexport const emergencyMeetingFinished = () => ({\n  type: 'emergencyMeetingFinished'\n})\n\nexport const allTasksCompleted = () => ({\n  type: 'allTasksCompleted'\n})\n\n/************************************************\n * Helpers/Shared Actions\n ************************************************/\nconst dispatchNextTurn = (dispatch, getState) => {\n\n  function Promise(callback) {\n    this.then = function(then) {\n      callback(then)\n    }\n  }\n\n  const continueGamePromise = new Promise(continueGame => {\n    if (isEmergencyMeetingFinished(getState())) {\n      const voteResults = getEmergencyMeetingVoteResults(getState())\n      if (voteResults.results.victory) {\n        dispatch(votedOffImposter(voteResults))\n      } else {\n        if (voteResults.results.tie) {\n          dispatch(votedTie(voteResults))\n        } else {\n          dispatch(voteFailed(voteResults))\n        }\n        // Give time for the players to see the results of the vote before continuing on\n        setTimeout(() => continueGame(), 3000)\n      }\n      dispatch(emergencyMeetingFinished())\n    } else if (isAllTasksComplete(getState())) {\n      dispatch(allTasksCompleted())\n    } else {\n      // just another turn - continue on immediately\n      continueGame()\n    }\n  })\n\n  continueGamePromise.then(() => {\n    dispatch(nextPlayerTurn())\n    let state = getState()\n    let player = getCurrentTurnPlayer(state)\n\n    console.log(\"XXX\", player)\n\n    if (!player.human && state.computerPlayersEnabled) {\n      doComputerPlayer(dispatch, getState)\n    }\n  })\n}\n\nconst doComputerPlayer = (dispatch, getState) => {\n  setTimeout(() => {\n    let action = ArrayUtils.sample(getAvailableComputerActions(getState))\n    dispatch(action)\n  }, 200)\n}\n\nconst getAvailableComputerActions = (getState) => {\n  const state = getState()\n  if (state.emergencyMeetingStarted) {\n    return [computerPlayerVote]\n  } else {\n    return computerActions\n  }\n}\n\nconst computerPlayerVote = (dispatch, getState) => {\n  const state = getState()\n  // TODO: make a better guess\n  if (Math.random() > .5) {\n    dispatch(voteImposter(ArrayUtils.sample(state.players).name))\n  } else {\n    dispatch(skipVote())\n  }\n}\n\nconst moveToRandomRoom = (dispatch, getState) => {\n  let state = getState()\n  let randomRoom = ArrayUtils.sample(state.rooms)\n  dispatch(onRoomSelected(randomRoom.name))\n}\n\nconst performCurrentRoomTask = (dispatch, getState) => {\n  let state = getState()\n  let currentPlayer = getCurrentTurnPlayer(state)\n  let room = getRoomForPlayer(state, currentPlayer)\n  let task = getTaskForRoom(state, room)\n  dispatch(onTaskSelected(task.id))\n}\n\nconst computerActions = [\n  moveToRandomRoom,\n  performCurrentRoomTask\n]\n\n","export class ReducerMap {\n  constructor() {\n    this.actionsToReducers = {}\n    this.initialState = {}\n  }\n\n  map(actionFn, reducer) {\n    let actionName = (typeof actionFn === 'function') ? actionFn.name : actionFn\n    if (!this.actionsToReducers[actionName]) {\n      this.actionsToReducers[actionName] = [];\n    }\n    let reducers = this.actionsToReducers[actionName];\n    reducers[reducers.length] = reducer;\n  }\n\n  reduce(startState, action) {\n    return this.getReducersForAction(action).reduce((state, reducer) =>\n        reducer(state, action), startState);\n  }\n\n  getReducersForAction(action) {\n    let type = action.type;\n    let reducers = this.actionsToReducers[type];\n    if (reducers) {\n      return reducers;\n    } else {\n      console.log(`No reducer found for ${type}`)\n      return [];\n    }\n  }\n}\n\nconst reducerMap = new ReducerMap();\n\nexport const map = (actionFn, reducer) => {\n  reducerMap.map(actionFn, reducer);\n}\n\nexport function reducer(state = reducerMap.initialState, action) {\n  return reducerMap.reduce(state, action);\n}\n\n","import {\n  ArrayUtils\n} from \"../utils\";\nimport {\n  getCurrentTurnPlayer, getRoomForPlayer,\n  getRoomByName, getTaskById, isPlayerPerformingTask, isImposter, isOnlyPlayerInRoom\n} from \"../selectors/selectors\";\n\n/************************************************\n * Mutators\n ************************************************/\nexport const resetGame = state => {\n  state.gameOver = false\n  state.victory = false\n}\nexport const addPlayer = (state, action) => {\n  if (state.addPlayerForm.name.length === 0)  {\n    return state;\n  }\n  let player = {\n    ...action.player,\n    name: state.addPlayerForm.name,\n    image: ArrayUtils.pluckRandom(state.availablePlayerImages),\n  }\n  state.players[state.players.length] = player\n  movePlayerToRoom(state, player, \"Cafeteria\")\n  state.addPlayerForm.name = \"\"\n}\n\nexport const movePlayersToCafeteria = state => {\n  state.rooms.forEach(room => room.playerNames = []);\n  state.players.forEach(player => movePlayerToRoom(state, player, \"Cafeteria\"))\n}\n\nexport const movePlayerToRoom = (state, player, roomName) => {\n  leaveCurrentRoom(state, player.name)\n  let newRoom = getRoomByName(state, roomName);\n  newRoom.playerNames[newRoom.playerNames.length] = player.name\n}\n\nexport const moveCurrentPlayerToRoom = (state, roomName) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    movePlayerToRoom(state, currentTurnPlayer, roomName)\n  }\n}\n\nexport const leaveCurrentRoom = (state, playerNameToRemove) => {\n  state.rooms.forEach(room => {\n    room.playerNames = ArrayUtils.allExcept(room.playerNames, playerNameToRemove);\n  })\n}\n\nexport const assignPlayerToTask = (state, taskId) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  let currentTurnPlayerRoom = getRoomForPlayer(state, currentTurnPlayer)\n  if (taskId === currentTurnPlayerRoom.taskId) {\n    let task = getTaskById(state, taskId)\n    task.playerName = currentTurnPlayer.name\n  }\n}\n\nexport const finishCurrentTurnPlayerTask = state => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  let room = getRoomForPlayer(state, currentTurnPlayer)\n  let task = getTaskById(state, room.taskId)\n  if (isPlayerPerformingTask(currentTurnPlayer, task)) {\n    if (isImposter(state, currentTurnPlayer)) {\n      if (isOnlyPlayerInRoom(room, currentTurnPlayer)) {\n        console.log(`${currentTurnPlayer.name} sabotaged ${task.description}`)\n        task.completed = false\n      } else {\n        // TODO: don't _always_ complete it\n        task.compelted = true\n      }\n    } else {\n      // TODO: don't _always_ complete it\n      task.completed = true\n    }\n\n    task.playerName = null\n  }\n}\n\nconst abandonAllTasks = state => {\n  state.tasks.forEach(task => task.playerName = null)\n}\n\nexport const startEmergencyMeeting = state => {\n  movePlayersToCafeteria(state)\n  abandonAllTasks(state)\n  state.emergencyMeetingStarted = true\n  state.emergencyMeetingInitiatedByPlayerIndex = state.currentTurnPlayerIndex\n  resetVoteTallies(state)\n  state.notify = {\n    message: \"Emergency Meeting!\",\n    className: \"emergencyMeeting\"\n  }\n}\n\nconst resetVoteTallies = state => {\n  state.players.forEach(player => state.voteTalliesByPlayer[player.name] = 0)\n}\n\nexport const voteImposter = (state, playerName) => {\n  state.voteTalliesByPlayer[playerName] += 1\n}\n\n\n","import * as actions from \"./actions\"\nimport { map, reducer } from \"./utils/redux-map\";\nimport { mutatorToReducer, ArrayUtils, reduceAll } from \"../utils\";\nimport {\n  addPlayer as addPlayerMutator,\n  startEmergencyMeeting as startEmergencyMeetingMutator,\n  voteImposter as voteImposterMutator,\n  assignPlayerToTask, finishCurrentTurnPlayerTask,\n  moveCurrentPlayerToRoom,\n  movePlayersToCafeteria,\n} from \"./mutators\"\nimport {\n  getCurrentTurnPlayerName,\n  getNextPlayerTurnIndex\n} from \"../selectors/selectors\"\n\nexport const initialState = {\n  gameOver: false,\n  notify: {\n    message: null\n  },\n  computerPlayersEnabled: false,\n  currentTurnPlayerIndex: -1,\n  emergencyMeetingStarted: false,\n  emergencyMeetingInitiatedByPlayerIndex: null,\n  voteTalliesByPlayer: {},\n  computerPlayers: [\n    \"Funk\",\n    \"Foo\",\n    \"Grandpop\",\n    \"Grandma\",\n    \"Preston\",\n    \"Mouth\",\n    \"Crayon\"\n  ],\n  availableComputerPlayers: [],\n  playerImages: [\n    \"blue\",\n    \"darkgreen\",\n\t\t\"green\",\n\t\t\"lightblue\",\n\t\t\"orange\",\n\t\t\"pink\",\n\t\t\"red\",\n\t\t\"white\"\n  ],\n  availablePlayerImages: [],\n  addPlayerForm: {\n    name: \"\",\n  },\n  players: [],\n  tasks: [\n    {\n      id: 1,\n      description: \"Fix wiring\",\n      completed: false,\n      playerName: null\n    },\n    {\n      id: 2,\n      description: \"Unlock manifolds\",\n      completed: false,\n      playerName: null\n    },\n    {\n      id: 3,\n      description: \"Swipe card\",\n      completed: false,\n      playerName: null\n    },\n    {\n      id: 4,\n      description: \"Stabilize steering\",\n      completed: false,\n      playerName: null\n    },\n    {\n      id: 5,\n      description: \"Destroy asteroids\",\n      completed: false,\n      playerName: null\n    },\n    {\n      id: 6,\n      description: \"Fill the fuel tank\",\n      completed: false,\n      playerName: null\n    }\n  ],\n  rooms: [\n    {\n      name: \"Cafeteria\",\n      taskId: 1,\n      playerNames: [],\n      emergencyButton: true\n    },\n    {\n      name: \"Reactor\",\n      taskId: 2,\n      playerNames: [],\n    },\n    {\n      name: \"Admin\",\n      taskId: 3,\n      playerNames: [],\n    },\n    {\n      name: \"Navigation\",\n      taskId: 4,\n      playerNames: [],\n    },\n    {\n      name: \"Weapons\",\n      taskId: 5,\n      playerNames: [],\n    },\n    {\n      name: \"Engine\",\n      taskId: 6,\n      playerNames: [],\n    },\n  ]\n}\n\nconst updatePlayerName = (state, action) => {\n  return {\n    ...state,\n    addPlayerForm: {\n      name: action.name\n    }\n  }\n}\n\nconst addPlayer = (state, action) => reduceAll(state,\n  mutatorToReducer(state => addPlayerMutator(state, action))\n)\n\nconst init = state => reduceAll(state,\n  resetAvailableComputerPlayers,\n  resetAvailablePlayerImages,\n)\n\nconst startGame = state => reduceAll(state,\n  state => ({\n    ...state,\n    gameOver: false,\n    victory: false\n  }),\n  resetCurrentTurnPlayerIndex,\n  pickImposter,\n  mutatorToReducer(movePlayersToCafeteria),\n)\n\nconst selectRoom = (state, action) => reduceAll(state,\n  mutatorToReducer(state => moveCurrentPlayerToRoom(state, action.roomName)),\n)\n\nconst selectTask = (state, action) => reduceAll(state,\n  mutatorToReducer(newState => assignPlayerToTask(newState, action.taskId)),\n)\n\nconst nextPlayerTurn = state => reduceAll(state,\n  (state) => ({\n     ...state,\n     currentTurnPlayerIndex: getNextPlayerTurnIndex(state)\n   }),\n   mutatorToReducer(finishCurrentTurnPlayerTask),\n   showCurrentPlayerNotification\n)\n\nconst enableComputerPlayers = state => ({\n  ...state,\n  computerPlayersEnabled: true,\n})\n\nconst startEmergencyMeeting = state => reduceAll(state,\n  mutatorToReducer(startEmergencyMeetingMutator))\n\nconst voteImposter = (state, action) => reduceAll(state,\n  mutatorToReducer(state => voteImposterMutator(state, action.playerName))\n)\n\nconst votedOffImposter = (state, action) => ({\n  ...state,\n  gameOver: true,\n  notify: {\n    message: `Victory! ${action.voteResults.mostVoted.playerName} was the imposter!`,\n    className: \"victory\"\n  }\n})\nconst votedTie = state => ({\n  ...state,\n  notify: {\n    message: \"Tie! No one was ejected.\",\n    className: \"alert\"\n  }\n})\nconst voteFailed = (state, action) => ({\n  ...state,\n  notify: {\n    message: `${action.voteResults.mostVoted.playerName} was NOT the imposter!`,\n    className: \"alert\"\n  }\n})\n\nconst emergencyMeetingFinished = state => ({\n  ...state,\n  emergencyMeetingStarted: false,\n  emergencyMeetingInitiatedByPlayerIndex: null\n})\n\nconst allTasksCompleted = state => ({\n  ...state,\n  gameOver: true,\n  notify: {\n    message: \"All tasks were completed! The Crewmates Win!\",\n    className: \"victory\"\n  }\n})\n\nmap(actions.init, init)\nmap(actions.startGame, startGame)\nmap(actions.enableComputerPlayers, enableComputerPlayers)\nmap(actions.updatePlayerName, updatePlayerName)\nmap(actions.addHumanPlayer, addPlayer)\nmap(actions.addComputerPlayer, addPlayer)\nmap(actions.onRoomSelected, selectRoom)\nmap(actions.onTaskSelected, selectTask)\nmap(actions.nextPlayerTurn, nextPlayerTurn)\nmap(actions.onEmergencyMeetingSelected, startEmergencyMeeting)\nmap(actions.voteImposter, voteImposter)\nmap(actions.votedOffImposter, votedOffImposter)\nmap(actions.votedTie, votedTie)\nmap(actions.voteFailed, voteFailed)\nmap(actions.emergencyMeetingFinished, emergencyMeetingFinished)\nmap(actions.allTasksCompleted, allTasksCompleted)\n\n/************************************************\n * Other Reducers, Helpers, and Shared Reducer Methods\n ************************************************/\nconst pickImposter = state => ({\n  ...state,\n  imposterPlayerName: ArrayUtils.sample(state.players).name\n})\n\nconst resetCurrentTurnPlayerIndex = state => ({\n  ...state,\n  currentTurnPlayerIndex: -1\n})\n\nconst resetAvailableComputerPlayers = state => ({\n  ...state,\n  availableComputerPlayers: ArrayUtils.clone(state.computerPlayers)\n})\n\nconst resetAvailablePlayerImages = state => ({\n  ...state,\n  availablePlayerImages: ArrayUtils.clone(state.playerImages)\n})\n\nconst showCurrentPlayerNotification = state => ({\n  ...state,\n  notify: {\n    message: `${getCurrentTurnPlayerName(state)}'s turn!`,\n    className: \"turn\"\n  }\n});\n\nexport const rootReducer = reducer\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { rootReducer, initialState } from \"./reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { init } from \"./actions\"\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst store = createStore(rootReducer, initialState, composeWithDevTools(middlewareEnhancer))\n\nstore.dispatch(init());\n\nexport default store\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Notify = ({notify}) => (\n    notify.message == null ? \"<div/>\" : <div id=\"notify\" className={notify.className}>{notify.message}</div>\n);\n\nconst mapStateToProps = state => ({\n  notify: state.notify\n})\n\nexport default connect(mapStateToProps)(Notify);\n\n","import { connect } from \"react-redux\";\nimport Notify from \"./Notify\"\nimport {\n  updatePlayerName,\n  addHumanPlayer,\n  addComputerPlayer,\n  startGame\n} from \"../redux/actions\"\n\nconst Header = ({\n    addPlayerForm,\n    updatePlayerName,\n    addHumanPlayer,\n    addComputerPlayer,\n    startGame\n}) => (\n  <div className=\"header\">\n    <div className=\"title\">AMONG US</div>\n    <div className=\"gameControls\">\n      <div className=\"addHumanPlayer\">\n        <input id=\"playerName\" placeholder=\"Player Name\"\n               value={addPlayerForm.name}\n               onKeyUp={e => {\n                 if (e.code === 'Enter') {\n                   addHumanPlayer()\n                 }\n               }}\n               onChange={(e) => {\n                 updatePlayerName(e.target.value);\n               }}/>\n        <button id=\"addHumanPlayer\" onClick={() => addHumanPlayer()}>Add Human Player</button>\n      </div>\n      <button id=\"addComputerPlayer\" onClick={() => addComputerPlayer()}>Add Computer Player</button>\n      |\n      <button id=\"startButton\" onClick={() => startGame()}>Start!</button>\n    </div>\n    <Notify/>\n  </div>\n)\n\nconst mapStateToProps = state => ({\n  addPlayerForm: state.addPlayerForm\n})\n\nexport default connect(\n    mapStateToProps,\n    {\n      updatePlayerName,\n      addHumanPlayer,\n      addComputerPlayer,\n      startGame,\n    }\n)(Header);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  isCurrentTurnPlayer,\n} from \"../selectors/selectors\"\nimport {\n  skipVote,\n  voteImposter\n} from \"../redux/actions\";\n\nconst Player = ({\n  celebrate,\n  player,\n  isCurrentTurn,\n  votingEnabled,\n  skipVote,\n  voteImposter\n}) => (\n    <div className={`player ${isCurrentTurn || celebrate ? \"turnHighlight\" : \"\"}`}>\n      <div>\n        <div className=\"imageContainer\">\n          <img src={`character-images/${player.image}.png`}/>\n        </div>\n        <div className=\"playerContent\">\n          <span className=\"playerName\">{player.name}</span>\n          <span className=\"status\">\n            {\n              isCurrentTurn ? \"'s turn!\" : \"\"\n            }\n          </span>\n          <div>\n            {\n              votingEnabled ?\n                  isCurrentTurn ?\n                      <button className=\"skipButton\"\n                              onClick={() => skipVote()}>Skip</button>\n                      :\n                      <button className=\"voteButton\"\n                              onClick={() => voteImposter(player.name)}>Vote</button>\n                  : null\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n);\n\nconst mapStateToProps = (state, ownProps) => ({\n  ...ownProps,\n  celebrate: state.gameOver,\n  isCurrentTurn: isCurrentTurnPlayer(state, ownProps.player),\n  votingEnabled: state.emergencyMeetingStarted\n})\n\nexport default connect(mapStateToProps, {\n  skipVote,\n  voteImposter\n})(Player);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {onTaskSelected} from \"../redux/actions\";\nimport {\n  getRoomForTask,\n  isCurrentTurnPlayerAbleToSelectTask,\n  isCurrentTurnPlayerHumanAndInRoom\n} from \"../selectors/selectors\";\n\nconst Task = ({\n  task,\n  currentTurnPlayerAbleToPerformTask,\n  isCurrentTurnPlayerHumanAndInRoom,\n  onTaskSelected\n}) => (\n  <div className={`task ${currentTurnPlayerAbleToPerformTask ? \"selectable\" : \"\"}`} onClick={(e) => {\n    if (currentTurnPlayerAbleToPerformTask) {\n      onTaskSelected(task.id)\n    }\n    e.stopPropagation() // otherwise it'll fire the room selection\n  }}>\n    <div className=\"description\">{\n      task.playerName ? `${task.playerName} is performing ${task.description}` :\n          task.completed && isCurrentTurnPlayerHumanAndInRoom ? `${task.description} completed` : task.description\n    }</div>\n  </div>\n);\n\nconst mapStateToProps = (state, ownProps) => ({\n  ...ownProps,\n  isCurrentTurnPlayerHumanAndInRoom: isCurrentTurnPlayerHumanAndInRoom(state, getRoomForTask(state, ownProps.task)),\n  currentTurnPlayerAbleToPerformTask: isCurrentTurnPlayerAbleToSelectTask(state, ownProps.task),\n})\n\nexport default connect(\n  mapStateToProps, {\n  onTaskSelected\n})(Task);\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n  isEmergencyButtonEnabled\n} from \"../selectors/selectors\"\nimport {\n  onEmergencyMeetingSelected,\n} from \"../redux/actions\";\n\nconst EmergencyMeetingButton = ({\n  emergencyMeetingButtonEnabled,\n  emergencyMeetingStarted,\n  onEmergencyMeetingSelected,\n}) => (\n    <button disabled={!emergencyMeetingButtonEnabled}\n            onClick={() => {\n              if (!emergencyMeetingStarted) {\n                onEmergencyMeetingSelected()\n              }\n            }}\n            id=\"emergencyMeetingButton\">Emergency Meeting!</button>\n)\n\nconst mapStateToProps = state => ({\n  emergencyMeetingStarted: state.emergencyMeetingStarted,\n  emergencyMeetingButtonEnabled: isEmergencyButtonEnabled(state)\n})\n\nexport default connect(\n    mapStateToProps,\n    {\n      onEmergencyMeetingSelected,\n    }\n)(EmergencyMeetingButton);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Player from \"./Player\";\nimport Task from \"./Task\"\nimport {\n  getTaskForRoom,\n  getPlayersInRoom,\n  isCurrentTurnPlayerAbleToSelectRoom,\n} from \"../selectors/selectors\"\nimport {\n  onRoomSelected,\n} from \"../redux/actions\";\nimport EmergencyMeetingButton from \"./EmergencyMeetingButton\";\n\nconst Room = ({\n                room,\n                players,\n                task,\n  currentTurnPlayerAbleToSelectRoom,\n  onRoomSelected\n}) => (\n  <div className=\"room\" onClick={() => {\n    if (currentTurnPlayerAbleToSelectRoom) {\n      onRoomSelected(room.name)\n    }\n  }}>\n    <div>\n      <div className=\"roomName\">{room.name}</div>\n      <div className=\"taskContainer\">\n        <Task task={task}/>\n      </div>\n      {\n        room.emergencyButton ? <EmergencyMeetingButton/> : null\n      }\n    </div>\n    <div className=\"players\">\n        {\n            getPlayersInRoom(players, room).map(player => <Player key={player.name} player={player}/>)\n        }\n    </div>\n  </div>\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  room: ownProps.room,\n  players: state.players,\n  task: getTaskForRoom(state, ownProps.room),\n  currentTurnPlayerAbleToSelectRoom: isCurrentTurnPlayerAbleToSelectRoom(state, ownProps.room),\n})\n\nexport default connect(\n    mapStateToProps,\n    {\n      onRoomSelected,\n    }\n)(Room);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Room from \"./Room\"\n\nconst Rooms = ({ rooms }) => (\n    <div>\n      { rooms.map(room => <Room key={room.name} room={room}/>) }\n    </div>\n)\n\nconst mapStateToProps = state => ({\n    rooms: state.rooms\n})\n\nexport default connect(mapStateToProps)(Rooms);\n","import '../amongus.css'\nimport Header from \"./Header\"\nimport Rooms from \"./Rooms\"\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header/>\n        <Rooms/>\n      </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './components/App'\n\nimport {\n  addComputerPlayer,\n  addHumanPlayer, enableComputerPlayers, onEmergencyMeetingSelected,\n  onRoomSelected,\n  onTaskSelected, skipVote,\n  startGame,\n  updatePlayerName, voteImposter\n} from \"./redux/actions\";\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement\n)\n\nconst steps = [\n  () => updatePlayerName(\"Jackson\"),\n  () => addHumanPlayer(),\n  () => updatePlayerName(\"Daddy\"),\n  () => addHumanPlayer(),\n  () => updatePlayerName(\"Foo\"),\n  () => addComputerPlayer(),\n  () => updatePlayerName(\"Baz\"),\n  () => addComputerPlayer(),\n  () => startGame(),\n  () => onTaskSelected(1), // Jackson\n  () => onRoomSelected(\"Reactor\"), // Daddy\n  () => onRoomSelected(\"Navigation\"), // Foo\n  () => onTaskSelected(3), // Baz\n  () => onEmergencyMeetingSelected(), // jackson\n  () => voteImposter(\"Foo\"), // Jackson\n  () => voteImposter(\"Foo\"), // Daddy\n  () => skipVote(), // Foo\n  () => voteImposter(\"Jackson\"), // Baz\n  () => enableComputerPlayers()\n]\nlet currentStepIndex = 0;\nlet runStep = () => {\n  console.log(steps[currentStepIndex])\n  store.dispatch(steps[currentStepIndex]());\n  currentStepIndex++;\n  if (currentStepIndex === steps.length) {\n    clearInterval(intervalId);\n  }\n}\n\nlet intervalId = setInterval(() => runStep(), 100)\n\n\n\n"],"sourceRoot":""}